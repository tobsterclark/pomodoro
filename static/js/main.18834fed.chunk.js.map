{"version":3,"sources":["components/App.tsx","index.tsx"],"names":["App","seconds","useRef","useState","display","setDisplay","timerGoing","setTimerGoing","intervalID","setIntervalID","custom","setCustom","inputText","setInputText","useCookies","completedCookies","setCompletedCookie","totalCookies","setTotalCookie","useSound","volume","play","handleTimeChange","evt","buttonData","currentTarget","name","updateSeconds","parseInt","countDown","totalTime","current","newInterval","setInterval","addCookies","stopTimer","clearInterval","total","completed","path","newSeconds","secondsToTime","hours","Math","floor","formattedHours","formattedMinutes","formattedSeconds","minutes","String","timeToSeconds","time","split","hh","mm","ss","useEffect","undefined","className","onClick","placeholder","value","onChange","target","length","handleCustomInput","ReactDOM","render","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.18834fed.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport useSound from \"use-sound\";\r\n\r\nconst App = () => {\r\n\t// Seconds left for internal use and display\r\n\tconst seconds = useRef<number>(1500);\r\n\tconst [display, setDisplay] = useState<string>(\"25:00\");\r\n\r\n\t// Checking if the timer is active\r\n\tconst [timerGoing, setTimerGoing] = useState<boolean>(false);\r\n\t// The intervalID; used to clear the timer\r\n\tconst [intervalID, setIntervalID] = useState<any>();\r\n\t// Used to check whether to use custom input or not\r\n\tconst [custom, setCustom] = useState(false);\r\n\t// Custom input manager\r\n\tconst [inputText, setInputText] = useState(\"\");\r\n\r\n\t// Cookies\r\n\tconst [completedCookies, setCompletedCookie] = useCookies([\"completed\"]);\r\n\tconst [totalCookies, setTotalCookie] = useCookies([\"total\"]);\r\n\r\n\t// Ringtone that is played on timer finish\r\n\tconst [play] = useSound(\"https://jamiejcole.github.io/pomodoro/ringtone.mp3\", { volume: 1 });\r\n\r\n\t// Handling the start button being pressed\r\n\tconst handleStartPressed = () => {\r\n\t\tif (timerGoing === false && seconds.current > 1) {\r\n\t\t\tsetCustom(false);\r\n\t\t\tsetInputText(\"\");\r\n\t\t\tsetTimerGoing(true);\r\n\t\t\tcountDown();\r\n\t\t} else if (timerGoing === true) {\r\n\t\t\tstopTimer();\r\n\t\t}\r\n\t};\r\n\r\n\t// Handles different times being chosen (25, 10, 5, custom)\r\n\tconst handleTimeChange = (evt: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n\t\tlet buttonData = evt.currentTarget.name;\r\n\t\tif (!timerGoing) {\r\n\t\t\tbuttonData === \"custom\" ? setCustom(true) : setCustom(false);\r\n\t\t\tupdateSeconds(parseInt(buttonData) * 60);\r\n\t\t}\r\n\t};\r\n\r\n\t// Handles custom time input, custom time can be in MM, MM:SS, or HH:MM:SS\r\n\tconst handleCustomInput = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetInputText(evt.target.value);\r\n\t\tif (evt.target.value.length < 3) {\r\n\t\t\tupdateSeconds(timeToSeconds(\"00:\" + evt.target.value + \":00\"));\r\n\t\t} else if (evt.target.value.length < 6) {\r\n\t\t\tupdateSeconds(timeToSeconds(\"00:\" + evt.target.value));\r\n\t\t} else {\r\n\t\t\tupdateSeconds(timeToSeconds(evt.target.value));\r\n\t\t}\r\n\t};\r\n\r\n\t// Handles the actual countdown with an interval\r\n\tconst countDown = () => {\r\n\t\t// Records total time for cookies\r\n\t\tconst totalTime = seconds.current;\r\n\r\n\t\tconst newInterval = setInterval(() => {\r\n\t\t\tupdateSeconds(seconds.current - 1);\r\n\r\n\t\t\t// When timer finishes cleanup interval, play noise, and add cookies\r\n\t\t\tif (seconds.current === 0) {\r\n\t\t\t\taddCookies(totalTime);\r\n\t\t\t\tstopTimer();\r\n\t\t\t\tplay();\r\n\t\t\t}\r\n\t\t}, 1000);\r\n\r\n\t\tsetIntervalID(newInterval);\r\n\t};\r\n\r\n\t// Cleans up the interval timer\r\n\tconst stopTimer = () => {\r\n\t\tclearInterval(intervalID);\r\n\t\tsetTimerGoing(false);\r\n\t};\r\n\r\n\t// Adding the cookies which record total pomodoros and total time\r\n\tconst addCookies = (total: number) => {\r\n\t\tconst totalTime = parseInt(totalCookies.total) + total;\r\n\t\tsetCompletedCookie(\"completed\", parseInt(completedCookies.completed) + 1, { path: \"/\" });\r\n\t\tsetTotalCookie(\"total\", totalTime);\r\n\t};\r\n\r\n\t// updates the seconds ref and updates display state (so page rerenders)\r\n\tconst updateSeconds = (newSeconds: number) => {\r\n\t\tseconds.current = newSeconds;\r\n\t\tsetDisplay(secondsToTime(newSeconds));\r\n\t};\r\n\r\n\t// Converting seconds to HH:MM:SS\r\n\tconst secondsToTime = (seconds: number) => {\r\n\t\tlet hours: number = Math.floor(seconds / 3600);\r\n\t\tseconds %= 3600;\r\n\t\tlet minutes: number = Math.floor(seconds / 60);\r\n\t\tseconds %= 60;\r\n\r\n\t\tvar formattedHours: string;\r\n\t\tvar formattedMinutes: string;\r\n\t\tvar formattedSeconds: string;\r\n\r\n\t\thours < 10 ? (formattedHours = \"0\" + hours) : (formattedHours = String(hours));\r\n\t\tminutes < 10 ? (formattedMinutes = \"0\" + minutes) : (formattedMinutes = String(minutes));\r\n\t\tseconds < 10 ? (formattedSeconds = \"0\" + seconds) : (formattedSeconds = String(seconds));\r\n\r\n\t\tvar output: string;\r\n\t\thours < 1 ? (output = formattedMinutes + \":\" + formattedSeconds) : (output = formattedHours + \":\" + formattedMinutes + \":\" + formattedSeconds);\r\n\t\treturn output;\r\n\t};\r\n\r\n\t// Convert HH:MM:SS to seconds\r\n\tconst timeToSeconds = (time: string) => {\r\n\t\tconst [hh, mm, ss] = time.split(\":\");\r\n\r\n\t\tconst seconds = parseInt(mm) * 60 + parseInt(hh) * 3600 + parseInt(ss);\r\n\t\treturn seconds;\r\n\t};\r\n\r\n\t// Clearing interval when component is unmounted\r\n\tuseEffect(() => {\r\n\t\tif (completedCookies.completed === undefined || totalCookies.total === undefined) {\r\n\t\t\tsetCompletedCookie(\"completed\", 0, { path: \"/\" });\r\n\t\t\tsetTotalCookie(\"total\", 0, { path: \"/\" });\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tstopTimer();\r\n\t\t}; //eslint-disable-next-line\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"h-screen w-screen flex flex-col items-center justify-between bg-bgDark font-rubik text-white\">\r\n\t\t\t<span className=\"text-4xl font-bold flex text-center items-end h-1/5\">Pomodoro!</span>\r\n\t\t\t<div className=\"flex flex-col items-center justify-center gap-y-10 w-full h-4/5\">\r\n\t\t\t\t<div className=\"bg-default rounded-2xl shadow-2xl flex flex-col w-full max-w-md items-center justify-center gap-y-6 pt-7\">\r\n\t\t\t\t\t<div className=\"flex gap-x-1 md:gap-x-5 text-lg w-full px-1 md:px-7\">\r\n\t\t\t\t\t\t<button onClick={(evt) => handleTimeChange(evt)} name=\"25\" className=\"timerBtn\">\r\n\t\t\t\t\t\t\t25m\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button onClick={(evt) => handleTimeChange(evt)} name=\"10\" className=\"timerBtn\">\r\n\t\t\t\t\t\t\t10m\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button onClick={(evt) => handleTimeChange(evt)} name=\"5\" className=\"timerBtn\">\r\n\t\t\t\t\t\t\t5m\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button onClick={(evt) => handleTimeChange(evt)} name=\"custom\" className=\"timerBtn\">\r\n\t\t\t\t\t\t\tCustom\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"h-1/3 flex-none\">\r\n\t\t\t\t\t\t<span className={\"text-7xl font-bold h-full \" + (custom ? \"hidden\" : \"block\")}>{display}</span>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tclassName={\"text-7xl font-bold text-white h-full focus:outline-none bg-transparent w-full text-center \" + (custom ? \"block\" : \"hidden\")}\r\n\t\t\t\t\t\t\tplaceholder=\"00:00\"\r\n\t\t\t\t\t\t\tvalue={inputText}\r\n\t\t\t\t\t\t\tname=\"customInput\"\r\n\t\t\t\t\t\t\tonChange={(evt) => handleCustomInput(evt)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"flex flex-col\">\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={() => handleStartPressed()}\r\n\t\t\t\t\t\t\tclassName=\"bg-buttonWhite text-buttonText py-5 px-8 rounded-xl border-2 duration-150 transition-all border-buttonBorder z-10 font-bold transform hover:translate-y-2 active:translate-y-5 active:bg-default\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{timerGoing ? \"STOP\" : \"START\"}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<div className=\"bg-buttonBg h-14 rounded-xl border-2 border-buttonBorder z-5 transform -translate-y-10 font-bold text-buttonText\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"md:flex flex-col gap-y-5 items-center justify-center px-5 hidden\">\r\n\t\t\t\t\t<span className=\"text-4xl font-bold text-center\">Pomodoros Completed: {completedCookies.completed}</span>\r\n\t\t\t\t\t<span className=\"text-4xl font-bold text-center\">Total Time: {secondsToTime(parseInt(totalCookies.total))}</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App'\r\nimport {CookiesProvider} from 'react-cookie'\r\n\r\n\r\nReactDOM.render(<CookiesProvider><App /></CookiesProvider>, document.getElementById('root'))\r\n\r\n"],"sourceRoot":""}