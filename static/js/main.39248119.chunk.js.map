{"version":3,"sources":["components/App.tsx","index.tsx"],"names":["App","seconds","useRef","useState","time","setTime","timeInput","setTimeInput","timerVal","setTimerVal","timerGoing","setTimerGoing","interval","setinterval","custom","setCustom","inputText","setInputText","useCookies","completedCookies","setCompletedCookie","totalCookies","setTotalCookie","useSound","volume","play","handleTimeChange","evt","buttonData","currentTarget","name","current","parseInt","stopTimer","clearInterval","countDown","nextSecond","secondsToTime","addCookies","newInterval","setInterval","totalTime","total","console","log","completed","path","hours","Math","floor","formattedHours","formattedMinutes","formattedSeconds","minutes","String","timeToSeconds","split","hh","mm","ss","formattedMM","formattedHH","formattedSS","useEffect","undefined","className","onClick","placeholder","value","onChange","target","length","handleCustomInput","isNaN","ReactDOM","render","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.39248119.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport {useCookies} from 'react-cookie'\nimport useSound from 'use-sound'\n\nconst App = () => {\n    const seconds = useRef(0)\n    const intervalClass:any = null\n    const [time, setTime] = useState(\"25:00\")\n    const [timeInput, setTimeInput] = useState(25*60)\n    const [timerVal, setTimerVal] = useState(\"START\")\n    const [timerGoing, setTimerGoing] = useState(false)\n    const [interval, setinterval] = useState(intervalClass)\n    const [custom, setCustom] = useState(false)\n    const [inputText, setInputText] = useState(\"\")\n    const [completedCookies, setCompletedCookie] = useCookies(['completed'])\n    const [totalCookies, setTotalCookie] = useCookies(['total'])\n    const [play] = useSound(\"https://jamiejcole.github.io/pomodoro/ringtone.mp3\", {volume: 1})\n\n    //Handling the start button being pressed\n    const handleStartPressed = () => {\n        if (timerGoing === false && timeInput > 1 && isNaN(timeInput) === false) {\n            seconds.current = timeInput\n            setCustom(false)\n            setTimerGoing(true)\n            countDown()\n            setTimerVal(\"STOP\")\n        } else if (timerGoing === true){\n            stopTimer()\n        }\n    }\n\n    const handleTimeChange = (evt:React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        let buttonData = evt.currentTarget.name\n        if (seconds.current === 0 && buttonData !== 'custom') {\n            setCustom(false)\n            setTimeInput(parseInt(buttonData)*60)\n            setTime(buttonData+\":00\")\n        } else if (seconds.current === 0 && buttonData === 'custom') {\n            setCustom(true)\n        }\n    }\n\n    const handleCustomInput = (evt:React.ChangeEvent<HTMLInputElement>) => {\n        setInputText(evt.target.value)\n        if (evt.target.value.length < 3) {\n            setTimeInput(timeToSeconds(\"00:\"+evt.target.value+\":00\"))\n        } else if (evt.target.value.length < 6){\n            setTimeInput(timeToSeconds(\"00:\"+evt.target.value))\n        } else {\n            setTimeInput(timeToSeconds(evt.target.value))\n        }\n    }\n\n    const stopTimer = () => {\n        clearInterval(interval)\n        setTimerGoing(false)\n        setTimerVal(\"START\")\n    }\n\n    const countDown = () => {\n        let nextSecond = seconds.current - 1\n        seconds.current = nextSecond\n        setTime(secondsToTime(nextSecond))\n\n        if (seconds.current === 0) {\n            addCookies()\n            stopTimer() // seconds go into negative\n            setTimerGoing(false)\n            setTimerVal(\"START\")\n        }\n        const newInterval = setInterval(() => {\n            let nextSecond = seconds.current - 1\n            seconds.current = nextSecond\n            setTime(secondsToTime(nextSecond))\n\n            if (seconds.current === 0) {\n                addCookies()\n                clearInterval(newInterval)\n                setTimerGoing(false)\n                play()\n                setTimerVal(\"START\")\n            }\n        }, 1000)\n\n        setinterval(newInterval)\n    }\n\n    const addCookies = () => {\n        const totalTime = parseInt(totalCookies.total) + timeInput\n        console.log(totalTime, timeInput)\n        setCompletedCookie('completed', parseInt(completedCookies.completed)+1, {path: '/'})\n        setTotalCookie('total', totalTime)\n    }\n    \n\n    // Converting seconds to HH:MM:SS\n    const secondsToTime = (seconds:number) => {\n        let hours = Math.floor(seconds / 3600);\n        seconds %= 3600;\n        let minutes = Math.floor(seconds / 60);\n        seconds = seconds % 60;\n\n        var formattedHours:string\n        var formattedMinutes:string\n        var formattedSeconds:string\n\n        if (hours < 10) {formattedHours = \"0\" + hours} else {formattedHours = String(hours)}\n        if (minutes < 10) {formattedMinutes = \"0\" + minutes} else {formattedMinutes = String(minutes)}\n        if (seconds < 10) {formattedSeconds = \"0\" + seconds} else {formattedSeconds = String(seconds)}\n\n        if (hours < 1) {\n            return(formattedMinutes+\":\"+formattedSeconds)\n        } else {\n            return(formattedHours + \":\" + formattedMinutes + \":\" + formattedSeconds)\n        }\n        \n    }\n\n    const timeToSeconds = (time:string) => {\n        const [hh, mm, ss] = time.split(\":\")\n        const formattedMM = parseInt(mm) * 60\n        const formattedHH = parseInt(hh)  * 3600\n        const formattedSS = parseInt(ss)\n\n        const seconds = String(formattedHH+formattedMM+formattedSS)\n\n        return(parseInt(seconds))\n    }\n\n    // Clearing interval when component is unmounted\n    useEffect(() => {\n        if (completedCookies.completed === undefined || totalCookies.total === undefined) {\n            setCompletedCookie('completed', 0, {path: '/'})\n            setTotalCookie('total', 0, {path: '/'})\n        }\n\n\n        return () => {\n            stopTimer()\n        } //eslint-disable-next-line\n      }, [])\n\n    return (\n        <div className=\"h-screen w-screen flex flex-col items-center justify-center bg-bgDark font-rubik gap-y-24 text-white\">\n            <span className=\"text-4xl font-bold\">Pomodoro!</span>\n            <div className=\"flex flex-col items-center justify-center gap-y-10\">\n                <div className=\"w-425 h-300 bg-default rounded-2xl shadow-2xl flex flex-col items-center justify-center gap-y-6 pt-7\">\n                    <div className=\"flex gap-x-5 text-lg w-full px-7\">\n                        <button onClick={evt => handleTimeChange(evt)} name=\"25\" className=\"timerBtn\">25m</button>\n                        <button onClick={evt => handleTimeChange(evt)} name=\"10\" className=\"timerBtn\">10m</button>\n                        <button onClick={evt => handleTimeChange(evt)} name=\"5\" className=\"timerBtn\">5m</button>\n                        <button onClick={evt => handleTimeChange(evt)} name=\"custom\" className=\"timerBtn\">Custom</button>\n                    </div>\n                    <div>\n                        <span className={\"text-7xl font-bold \" + (custom ? 'hidden' : 'block')}>{time}</span>\n                        <input className={\"text-7xl font-bold text-white focus:outline-none bg-transparent w-full text-center \"+(custom ? 'block' : 'hidden')} placeholder=\"00:00\" value={inputText} name=\"customInput\" onChange={evt => handleCustomInput(evt)} />\n                    </div>\n                    <div className=\"flex flex-col\">\n                        <button onClick={() => handleStartPressed()} className=\"bg-buttonWhite text-buttonText py-5 px-8 rounded-xl border-2 duration-150 transition-all border-buttonBorder z-10 font-bold transform hover:translate-y-2 active:translate-y-5 active:bg-default\">{timerVal}</button>\n                        <div className=\"bg-buttonBg h-14 rounded-xl border-2 border-buttonBorder z-5 transform -translate-y-10 font-bold text-buttonText\"/>\n                    </div>\n                </div>\n                <div className=\"flex flex-col gap-y-5 items-center justify-center px-5\">\n                    <span className=\"text-4xl font-bold text-center\">Pomodoros Completed: {completedCookies.completed}</span>\n                    <span className=\"text-4xl font-bold text-center\">Total Time: {secondsToTime(parseInt(totalCookies.total))}</span>\n                </div>\n            </div>\n        </div>\n    )\n\n};\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport {CookiesProvider} from 'react-cookie'\n\n\nReactDOM.render(<CookiesProvider><App /></CookiesProvider>, document.getElementById('root'))\n\n"],"sourceRoot":""}