{"version":3,"sources":["components/App.tsx","index.tsx"],"names":["App","seconds","useRef","useState","time","setTime","timeInput","setTimeInput","timerVal","setTimerVal","timerGoing","setTimerGoing","interval","setinterval","useCookies","completedCookies","setCompletedCookie","totalCookies","setTotalCookie","stopTimer","clearInterval","handleTimeChange","evt","buttonData","currentTarget","name","current","parseInt","countDown","nextSecond","secondsToTime","addCookies","newInterval","setInterval","totalTime","total","console","log","completed","path","hours","Math","floor","formattedHours","formattedMinutes","formattedSeconds","minutes","String","useEffect","undefined","className","onClick","ReactDOM","render","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.acbe7e4b.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport {useCookies} from 'react-cookie'\n\n\nconst App = () => {\n    const seconds = useRef(0)\n    const intervalClass:any = null\n    const [time, setTime] = useState(\"25:00\")\n    const [timeInput, setTimeInput] = useState(20)\n    const [timerVal, setTimerVal] = useState(\"START\")\n    const [timerGoing, setTimerGoing] = useState(false)\n    const [interval, setinterval] = useState(intervalClass)\n    const [completedCookies, setCompletedCookie] = useCookies(['completed'])\n    const [totalCookies, setTotalCookie] = useCookies(['total'])\n\n\n\n    //Handling the start button being pressed\n    const handleStartPressed = () => {\n        if (timerGoing === false && timeInput !== 0) {\n            seconds.current = timeInput\n            setTimerGoing(true)\n            countDown()\n            setTimerVal(\"STOP\")\n        } else if (timerGoing === true){\n            stopTimer()\n        }\n    }\n\n    const stopTimer = () => {\n        clearInterval(interval)\n        setTimerGoing(false)\n        setTimerVal(\"START\")\n    }\n\n\n    const handleTimeChange = (evt:React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        let buttonData = evt.currentTarget.name\n        if (seconds.current === 0 && buttonData !== 'custom') {\n            setTimeInput(parseInt(buttonData)*60)\n            setTime(buttonData+\":00\")\n        }\n    }\n\n    const countDown = () => {\n        let nextSecond = seconds.current - 1\n        seconds.current = nextSecond\n        setTime(secondsToTime(nextSecond))\n\n        if (seconds.current === 0) {\n            addCookies()\n            stopTimer()\n            setTimerGoing(false)\n            setTimerVal(\"START\")\n        }\n        const newInterval = setInterval(() => {\n            let nextSecond = seconds.current - 1\n            seconds.current = nextSecond\n            setTime(secondsToTime(nextSecond))\n\n            if (seconds.current === 0) {\n                addCookies()\n                clearInterval(newInterval)\n                setTimerGoing(false)\n                setTimerVal(\"START\")\n            }\n        }, 1000)\n\n        setinterval(newInterval)\n    }\n\n    const addCookies = () => {\n        const totalTime = parseInt(totalCookies.total) + timeInput\n        console.log(totalTime, timeInput)\n        setCompletedCookie('completed', parseInt(completedCookies.completed)+1, {path: '/'})\n        setTotalCookie('total', totalTime)\n    }\n    \n\n    // Converting seconds to HH:MM:SS\n    const secondsToTime = (seconds:number) => {\n        let hours = Math.floor(seconds / 3600);\n        seconds %= 3600;\n        let minutes = Math.floor(seconds / 60);\n        seconds = seconds % 60;\n\n        var formattedHours:string\n        var formattedMinutes:string\n        var formattedSeconds:string\n\n        if (hours < 10) {formattedHours = \"0\" + hours} else {formattedHours = String(hours)}\n        if (minutes < 10) {formattedMinutes = \"0\" + minutes} else {formattedMinutes = String(minutes)}\n        if (seconds < 10) {formattedSeconds = \"0\" + seconds} else {formattedSeconds = String(seconds)}\n\n        if (hours < 1) {\n            return(formattedMinutes+\":\"+formattedSeconds)\n        } else {\n            return(formattedHours + \":\" + formattedMinutes + \":\" + formattedSeconds)\n        }\n        \n    }\n\n    // Clearing interval when component is unmounted\n    useEffect(() => {\n        if (completedCookies.completed === undefined || totalCookies.total === undefined) {\n            setCompletedCookie('completed', 0, {path: '/'})\n            setTotalCookie('total', 0, {path: '/'})\n        }\n\n\n        return () => {\n            stopTimer()\n        } //eslint-disable-next-line\n      }, [])\n\n    return (\n        <div className=\"h-screen w-full flex flex-col items-center justify-center bg-bgDark font-rubik gap-y-28 text-white\">\n            <span className=\"text-4xl font-bold\">Pomodoro!</span>\n            <div className=\"flex flex-col items-center justify-center gap-y-10\">\n                <div className=\"w-425 h-300 bg-default rounded-2xl shadow-2xl flex flex-col items-center justify-center gap-y-6 pt-7\">\n                    <div className=\"flex gap-x-5 text-lg w-full px-7\">\n                        <button onClick={evt => handleTimeChange(evt)} name=\"25\" className=\"timerBtn\">25m</button>\n                        <button onClick={evt => handleTimeChange(evt)} name=\"10\" className=\"timerBtn\">10m</button>\n                        <button onClick={evt => handleTimeChange(evt)} name=\"5\" className=\"timerBtn\">5m</button>\n                        <button onClick={evt => handleTimeChange(evt)} name=\"custom\" className=\"timerBtn\">Custom</button>\n                    </div>\n                    <div>\n                        <span className=\"text-7xl font-bold\">{time}</span>\n                        <input className=\"hidden\"></input>\n                    </div>\n                    <div className=\"flex flex-col\">\n                        <button onClick={() => handleStartPressed()} className=\"bg-buttonWhite text-buttonText py-5 px-8 rounded-xl border-2 duration-150 transition-all border-buttonBorder z-10 font-bold transform hover:translate-y-2 active:translate-y-5 active:bg-default\">{timerVal}</button>\n                        <div className=\"bg-buttonBg h-14 rounded-xl border-2 border-buttonBorder z-5 transform -translate-y-10 font-bold text-buttonText\"/>\n                    </div>\n                </div>\n                <div className=\"flex flex-col gap-y-5 items-center justify-center\">\n                    <span className=\"text-4xl font-bold\">Pomodoros Completed: {completedCookies.completed}</span>\n                    <span className=\"text-4xl font-bold\">Total Time: {secondsToTime(parseInt(totalCookies.total))}</span>\n                </div>\n            </div>\n        </div>\n    )\n\n};\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport {CookiesProvider} from 'react-cookie'\n\n\nReactDOM.render(<CookiesProvider><App /></CookiesProvider>, document.getElementById('root'))\n\n"],"sourceRoot":""}